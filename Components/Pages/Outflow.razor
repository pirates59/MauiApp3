@page "/outflow"
@using MauiApp3.Models
@using MauiApp3.Services
@inject UserService userService
@inject IJSRuntime JSRuntime
@using System.Text
<style>
    /* Styling for container of cards */
    .cards-contain {
        display: flex;
        margin-bottom: 20px;
        width: 100%;
    }

    /* Center alignment for headers */
    h3 {
        text-align: center;
        color: #333;
    }

    /* Container for card content */
    .content {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-bottom: 5px;
    }

    /* Styling for individual cards */
    .card {
        background-color: rgba(50, 173, 230, 0.25);
        margin-right: 10px;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 10px;
        width: 100%;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    /* Styling for images inside card */
    .content img {
        margin-bottom: 5px;
    }

    /* Styling for the filter section */
    .filter {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        flex-wrap: wrap;
    }

        .filter label {
            font-weight: bold;
            margin-right: 10px;
            color: #333;
        }

        .filter input[type="date"], .filter select {
            padding: 8px;
            font-size: 1rem;
            border-radius: 6px;
            border: 1px solid #ccc;
            background-color: #f9f9f9;
            margin-right: 15px;
            transition: border-color 0.3s ease;
        }

            .filter input[type="date"]:focus, .filter select:focus {
                border-color: #50ade6;
                outline: none;
            }

    /* Button styling */
    .styled-button {
        background-color: #EC993D;
        color: white;
        border: none;
        padding: 8px;
        border-radius: 6px;
        cursor: pointer;
    }

        .styled-button:hover {
            background-color: #1c80c4;
        }

        .styled-button:active {
            background-color: #1b6fa1;
        }

    /* Styling for paragraph inside card */
    .card p {
        margin: 5px 0;
        color: black;
        text-align: center;
    }

    /* Value styling inside card */
    .value {
        font-size: 1.2em;
        font-weight: bold;
        color: black;
        margin-top: 5px;
    }

    /* Container for form fields */
    .container {
        background-color: rgba(50, 173, 230, 0.25);
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 8px 10px rgba(0, 0, 0, 0.1);
        width: 100%;
        margin: auto;
        margin-top: 20px;
        height: 100%;
    }

    /* Tag styling */
    .tag {
        margin-right: 10px;
    }

    /* Search container for search input and button */
    .search-container {
        display: flex;
        align-items: center;
    }

    /* Search input field styling */
    .search-input {
        flex: 1;
        border: none;
        outline: none;
        background: transparent;
        padding: 5px;
        font-size: 16px;
    }

    /* Search button styling */
    .search-button {
        background: transparent;
        border: none;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .search-button img {
            height: 18px;
            width: 18px;
        }

    /* Styling for dropdowns */
    .dropdown {
        padding: 8px;
        border-radius: 6px;
        border: 1px solid #ccc;
        font-size: 1rem;
    }

    /* Styling for table */
    .table-style {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

        .table-style thead tr {
            color: black;
            text-align: left;
        }

        .table-style th, .table-style td {
            padding: 10px;
            border: 1px solid #ddd;
        }

        .table-style tbody tr:hover {
            background-color: #f1f1f1;
        }

    /* Empty state message */
    .data {
        text-align: center;
        color: #888;
        margin-top: 20px;
    }
</style>

<!-- Card showing total outflows -->
<div class="cards-contain">
    <div class="card">
        <div class="content">
            <img src="image/Expenses.png" alt="Expense Logo" style="height: 22px; width:22px">
            <p><strong>Total Outflows</strong></p>
            <p class="value">@Expense</p>
        </div>
    </div>
</div>

<!-- Filter form for date range and type -->
<div class="container">
    <div class="filter">
        <div class="tag">
            <label for="start_date">Start Date:</label>
            <input type="date" id="start_date" @bind="start_date" />

            <label for="end_date">End Date:</label>
            <input type="date" id="end_date" @bind="end_date" />

            <!-- Button to trigger date filter -->
            <button class="styled-button" @onclick="FilterByDate">Filter Date</button>
        </div>
        <div class="search-container">
            <label for="typeFilter">Filter:</label>
            <select @onchange="updateFilter" class="dropdown">
                <option value="All">All</option>
                <option value="Highest">Highest</option>
                <option value="Lowest">Lowest</option>
            </select>
        </div>
    </div>
</div>

<!-- Filter form for tags and notes search -->
<div class="container">
    <div class="filter">
        <div class="tag">
            <label for="Filter">Filter by Tag:</label>
            <select id="Filter" @onchange="FilterTag" class="dropdown">
                <option value="">All</option>
                @foreach (var tag in expenseTrans.Select(t => t.trans_tag).Distinct())
                {
                    <option value="@tag">@tag</option>
                }
            </select>
        </div>
        <div class="search-container">
           
            <button class="search-button" @onclick="ExportToCsv">
                <img src="image/share.png" alt="Share" style="height: 30px; width: 30px; margin-left:25px;margin-top:8px;" />
            </button>
            <input type="text" id="notes" placeholder="Search by note" @bind="notes" />
            <button class="search-button" @onclick="SearchNote">
                <img src="image/search.png" alt="Search" />
            </button>
        </div>
    </div>

    <!-- Table to display filtered transactions -->
    @if (filterTrans.Any())
    {
        <table class="table-style">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Amount</th>
                    <th>Tag</th>
                    <th>Note</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var transaction in filterTrans)
                {
                    <tr>
                        <td>@transaction.trans_date</td>
                        <td>@transaction.trans_amount</td>
                        <td>@transaction.trans_tag</td>
                        <td>@transaction.trans_note</td>
                        <td>@transaction.trans_type</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p class="data">No expense transactions found.</p>
    }
</div>

@code {
    // Variables for transactions and filters
    private List<Transaction> expenseTrans = new List<Transaction>();
    private List<Transaction> filterTrans = new List<Transaction>();
    private int Expense = 0;
    private int avgExpense = 0;
    private DateTime? start_date;
    private bool isSortAscending = true;
    private string currentFilter = "All";
    private DateTime? end_date;
    private string notes = string.Empty;

    // Initialize data when the page loads
    protected override void OnInitialized()
    {
        UserData();
    }

    // Method to load user data and expense transactions
    private void UserData()
    {
        var loggedInUser = userService.GetLoggedInUser();
        if (loggedInUser != null)
        {
            // Filter transactions to only expenses
            expenseTrans = loggedInUser.Trans
                .Where(t => t.trans_type == "Expense")
                .ToList();

            filterTrans = expenseTrans;

            // Calculate the total expense amount
            Expense = expenseTrans
                .Sum(t => int.TryParse(t.trans_amount, out var amount) ? amount : 0);
        }
    }

    // Method to update filter based on selection (Highest, Lowest, or All)
    private void updateFilter(ChangeEventArgs e)
    {
        currentFilter = e.Value?.ToString() ?? "All";

        if (currentFilter == "Highest")
        {
            filterTrans = expenseTrans
                .OrderByDescending(t => int.TryParse(t.trans_amount, out var amount) ? amount : 0)
                .Take(5)
                .ToList();
        }
        else if (currentFilter == "Lowest")
        {
            filterTrans = expenseTrans
                .OrderBy(t => int.TryParse(t.trans_amount, out var amount) ? amount : 0)
                .Take(5)
                .ToList();
        }
        else
        {
            filterTrans = expenseTrans;
        }
    }

    // Method to filter transactions based on selected date range
    private void FilterByDate()
    {
        if (start_date.HasValue && end_date.HasValue)
        {
            // Filter transactions based on date range
            filterTrans = expenseTrans
                .Where(t => DateTime.TryParse(t.trans_date, out var date) && date >= start_date && date <= end_date)
                .ToList();

            // Recalculate total expense
            Expense = filterTrans
                .Sum(t => int.TryParse(t.trans_amount, out var amount) ? amount : 0);
        }
        else
        {
            filterTrans = expenseTrans;
            Expense = expenseTrans
                .Sum(t => int.TryParse(t.trans_amount, out var amount) ? amount : 0);
        }
    }

    // Toggle sorting transactions by date
    private void ToggleSortByDate()
    {
        if (isSortAscending)
        {
            filterTrans = filterTrans.OrderBy(t => DateTime.Parse(t.trans_date)).ToList();
        }
        else
        {
            filterTrans = filterTrans.OrderByDescending(t => DateTime.Parse(t.trans_date)).ToList();
        }
        isSortAscending = !isSortAscending;
    }

    // Method to filter transactions by tag
    private void FilterTag(ChangeEventArgs e)
    {
        var Tag = e.Value?.ToString();
        if (!string.IsNullOrEmpty(Tag))
        {
            filterTrans = expenseTrans
                .Where(t => t.trans_tag == Tag)
                .ToList();
        }
        else
        {
            filterTrans = expenseTrans;
        }
    }

    private async Task ExportToCsv()
    {
        var csvContent = new StringBuilder();
        csvContent.AppendLine("Type,Amount,Date,Tag,Note");

        // Iterate through filtered transactions and append data
        foreach (var transaction in filterTrans)
        {
            csvContent.AppendLine($"{transaction.trans_type}," +
                                  $"{transaction.trans_amount}," +
                                  $"{transaction.trans_date}," +
                                  $"{transaction.trans_tag}," +
                                  $"{transaction.trans_note}");
        }

        // File details
        var fileName = "Filtered_Outflows.csv";
        var fileBytes = Encoding.UTF8.GetBytes(csvContent.ToString());
        var fileBase64 = Convert.ToBase64String(fileBytes);

        // Trigger file download in browser
        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, fileBase64);
    }


    // Method to filter transactions by note content
    private void SearchNote()
    {
        filterTrans = expenseTrans
            .Where(t => string.IsNullOrEmpty(notes) ||
                        (t.trans_note?.IndexOf(notes, StringComparison.OrdinalIgnoreCase) >= 0))
            .ToList();
    }
}
