@page "/outflow"
@using MauiApp3.Models
@using MauiApp3.Services
@inject UserService userService

<style>

  
    .cards-contain {
        display: flex;
        margin-bottom: 20px;
        width:100%;
    }

    h3 {
        text-align: center;
        color: #333;
    }

    .content {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-bottom: 5px;
    }

    .card {
        background-color: rgba(50, 173, 230, 0.25);
        margin-right: 10px;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 10px;
        width: 100%;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

   
        .content img {
            margin-bottom: 5px;
        }


        .card p {
            margin: 5px 0;
            color: black;
            text-align: center;
        }

    .value {
        font-size: 1.2em;
        font-weight: bold;
        color: black;
        margin-top: 5px;
    }

    .container {
        background-color: rgba(50, 173, 230, 0.25);
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 8px 10px rgba(0, 0, 0, 0.1);
        width: 100%;
        margin: auto;
        margin-top: 50px;
        height: 100%;
    }

    .filter {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
        align-items: center;
    }

    .tag {
        margin-right: 10px;
    }

    .search-container {
        display: flex;
        align-items: center;
    }

    .search-input {
        flex: 1;
        border: none;
        outline: none;
        background: transparent;
        padding: 5px;
        font-size: 16px;
    }

    .search-button {
        background: transparent;
        border: none;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .search-button img {
            height: 18px;
            width: 18px;
        }


    .styled-button {
        background-color: rgba(50, 173, 230, 0.25);
        color: black;
        border: none;
        padding: 4px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }


    .table-style {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

        .table-style thead tr {
            color: black;
            text-align: left;
        }

        .table-style th, .table-style td {
            padding: 10px;
            border: 1px solid #ddd;
        }

        
        .table-style tbody tr:hover {
            background-color: #f1f1f1;
        }

    .data {
        text-align: center;
        color: #888;
        margin-top: 20px;
    }
</style>



<div class="cards-contain">
    <div class="card">
        <div class="content">
            <img src="image/Expenses.png" alt="Expense Logo" style="height: 22px; width:22px">
            <p><strong>Total Outflows</strong></p>
            <p class="value">@Expense</p>
        </div>
    </div>


</div>
<div class="filter">
    <label for="startDate">Start Date:</label>
    <input type="date" id="startDate" @bind="startDate" />

    <label for="endDate">End Date:</label>
    <input type="date" id="endDate" @bind="endDate" />

    <button class="styled-button" @onclick="FilterByDateRange">Filter by Date Range</button>

    <select @onchange="UpdateFilter" class="filter-dropdown">
        <option value="All">All</option>
        <option value="Highest">Highest</option>
        <option value="Lowest">Lowest</option>
    </select>
</div>


<div class="container">
<div class="filter">
    <div class="tag">
        <label for="Filter">Filter by Tag:</label>
        <select id="Filter" @onchange="FilterTag">
            <option value="">All</option>
            @foreach (var tag in expenseTrans.Select(t => t.trans_tag).Distinct())
            {
                <option value="@tag">@tag</option>
            }
        </select>
    </div>
        <div class="search-container">
            <input type="text" id="notes" placeholder="Search by note" @bind="notes" />
            <button class="search-button" @onclick="SearchNote">
                <img src="image/search.png" alt="Search" />
            </button>
        </div>
        </div>

@if (filterTrans.Any())
{
    <table class="table-style">
        <thead>
            <tr>
                <th>Date</th>
                <th>Amount</th>
                <th>Tag</th>
                <th>Note</th>
                <th>Type</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in filterTrans)
            {
                <tr>


                    <td>@transaction.trans_date</td>
                    <td>@transaction.trans_amount</td>
                    <td>@transaction.trans_tag</td>
                    <td>@transaction.trans_note</td>
                    <td>@transaction.trans_type</td>
                </tr>
            }
        </tbody>
    </table>

  
}
else
{
    <p class="data">No expense transactions found.</p>
}
</div>

@code {
    private List<Transaction> expenseTrans = new List<Transaction>();
    private List<Transaction> filterTrans = new List<Transaction>();
    private int Expense = 0;
    private int avgExpense = 0;
    private DateTime? startDate;
    private bool isSortAscending = true;
    private string currentFilter = "All";
    private DateTime? endDate;
    private string notes = string.Empty;

    protected override void OnInitialized()
    {
        LoadUserData();
    }

    private void LoadUserData()
    {
        var loggedInUser = userService.GetLoggedInUser();
        if (loggedInUser != null)
        {
            expenseTrans = loggedInUser.Trans
                .Where(t => t.trans_type == "Income")
                .ToList();

            filterTrans = expenseTrans;

            Expense = expenseTrans
                .Sum(t => int.TryParse(t.trans_amount, out var amount) ? amount : 0);
        }
    }

    private void UpdateFilter(ChangeEventArgs e)
    {
        currentFilter = e.Value?.ToString() ?? "All";

        if (currentFilter == "Highest")
        {
            filterTrans = expenseTrans
                .OrderByDescending(t => int.TryParse(t.trans_amount, out var amount) ? amount : 0)
                .Take(5)
                .ToList();
        }
        else if (currentFilter == "Lowest")
        {
            filterTrans = expenseTrans
                .OrderBy(t => int.TryParse(t.trans_amount, out var amount) ? amount : 0)
                .Take(5)
                .ToList();
        }
        else
        {
            filterTrans = expenseTrans;
        }
    }

    private void FilterByDateRange()
    {
        if (startDate.HasValue && endDate.HasValue)
        {
            filterTrans = expenseTrans
                .Where(t => DateTime.TryParse(t.trans_date, out var date) && date >= startDate && date <= endDate)
                .ToList();

            Expense = filterTrans
                .Sum(t => int.TryParse(t.trans_amount, out var amount) ? amount : 0);
        }
        else
        {
            filterTrans = expenseTrans;
            Expense = expenseTrans
                .Sum(t => int.TryParse(t.trans_amount, out var amount) ? amount : 0);
        }
    }
    private void ToggleSortByDate()
    {
        if (isSortAscending)
        {
            filterTrans = filterTrans.OrderBy(t => DateTime.Parse(t.trans_date)).ToList();
        }
        else
        {
            filterTrans = filterTrans.OrderByDescending(t => DateTime.Parse(t.trans_date)).ToList();
        }
        isSortAscending = !isSortAscending;
    }

    private void FilterTag(ChangeEventArgs e)
    {
        var Tag = e.Value?.ToString();
        if (!string.IsNullOrEmpty(Tag))
        {
            filterTrans = expenseTrans
                .Where(t => t.trans_tag == Tag)
                .ToList();
        }
        else
        {
            filterTrans = expenseTrans;
        }
    }

    private void SearchNote()
    {
        filterTrans = expenseTrans
            .Where(t => string.IsNullOrEmpty(notes) ||
                        (t.trans_note?.IndexOf(notes, StringComparison.OrdinalIgnoreCase) >= 0))
            .ToList();
    }

}
