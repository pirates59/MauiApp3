@page "/dashboard"
@inject NavigationManager NavigationManager
@using MauiApp3.Services
@inject UserService UserService
@using MauiApp3.Models


<style>
    /* Styling for the body of the page */
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: #333;
        margin: 0;
        padding: 0;
    }

    /* Container for cards layout */
    .cards-contain {
        display: flex;
        margin-bottom: 20px;
        width: 100%;
    }

    /* Styling for individual filter cards */
    .card-filter {
        background-color: rgba(50, 173, 230, 0.25);
        margin-right: 10px;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 10px;
        width: 100%;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    /* Styling for horizontal form layout */
    .horizontal-form {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 10px;
    }

        /* Styling for form labels */
        .horizontal-form label {
            font-weight: bold;
            margin-right: 5px;
        }

        /* Styling for input date fields */
        .horizontal-form input[type="date"] {
            padding: 5px;
            font-size: 1rem;
            border-radius: 4px;
            border: 1px solid #ccc;
        }

    /* Styling for buttons */
    .styled-button {
        background-color: #EC993D;
        color: white;
        margin-left: auto;
        padding: 10px 20px;
        border-radius: 5px;
        font-size: 1rem;
        font-weight: 600;
        border: none;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        /* Hover effect for button */
        .styled-button:hover {
            background-color: #D58233;
        }

    /* Container to hold the whole page content */
    .container {
        width: 90%;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    /* Row layout for cards */
    .row {
        display: flex;
        flex-wrap: nowrap;
        justify-content: space-between;
        gap: 20px;
    }

    /* Card styling for individual items like Total Transactions, Amount, etc. */
    .card {
        flex: 1 1 calc(25% - 20px);
        max-width: calc(25% - 20px);
        background-color: rgba(50, 173, 230, 0.25);
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 6px 10px rgba(0, 0, 0, 0.1);
        text-align: center;
    }

    /* Title for each card */
    .card-title {
        font-size: 1.5rem;
        font-weight: bold;
        margin: 10px 0;
    }

    /* Add space between rows */
    .row + .row {
        margin-top: 20px;
    }

    /* Card layout for larger screens, 2 cards per row */
    .card {
        flex: 1 1 calc(50% - 30px);
        max-width: calc(50% - 30px);
    }

    /* Adjust the form layout to row direction and spacing */
    .horizontal-form {
        flex-direction: row;
        gap: 20px;
    }

    /* Wrapper for table layout */
    .table-wrapper {
        flex: 1 1 100%;
    }

    /* Styling for the table container */
    .table-container {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        justify-content: center;
        margin: 20px 0;
    }

    /* Table wrapper for individual tables */
    .table-wrapper {
        flex: 1;
        min-width: 300px;
        background-color: rgba(50, 173, 230, 0.25);
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 6px 10px rgba(0, 0, 0, 0.1);
    }

        /* Heading for tables */
        .table-wrapper h3 {
            margin-bottom: 15px;
            color: #333;
            font-weight: bold;
        }

    /* Styling for dropdown (select) filter */
    .dropdown {
        padding: 8px;
        border-radius: 6px;
        border: 1px solid #ccc;
        font-size: 1rem;
    }

    /* Styling for tables */
    .table-style {
        width: 100%;
        border-collapse: collapse;
        margin-top: 15px;
    }

        /* Table header and cell styling */
        .table-style th, .table-style td {
            padding: 12px;
            border: 1px solid #ddd;
            text-align: left;
        }

        /* Table header styling */
        .table-style thead tr {
            color: black;
            text-align: left;
        }

        /* Hover effect for table rows */
        .table-style tbody tr:hover {
            background-color: #f1f1f1;
        }
</style>

<!-- Conditional rendering for user greeting -->

@if (currentUser != null) 
{
    <p>Welcome, @currentUser.user_name!</p> <!-- Displaying the current user's name -->
}
<div class="cards-contain">
    <div class="card-filter">
        <div class="horizontal-form">
            <label for="start_date">Start Date:</label>
            <input type="date" id="start_date" @bind="start_date" />

            <label for="end_date">End Date:</label>
            <input type="date" id="end_date" @bind="end_date" />

            <button class="styled-button" @onclick="DateFilter">Filter</button>
        </div>
    </div>
</div>


<div class="container">
    <!-- Cards Section -->
    <div class="row">
        <!-- Total Transactions Card -->
        <div class="card">
                Total Transactions
                <h5 class="card-title">@totalTrans</h5>
            </div>
        

        <!-- Total Amount Card -->
        <div class="card">
                Total Amount
                <h5 class="card-title">$@totalAmount</h5>
            
        </div>

        <!-- Income Card -->
        <div class="card">
                Cash Inflow
                <h5 class="card-title">$@totalInflow</h5>
            
        </div>

        <div class="card">
                Cash Outflow
                <h5 class="card-title">$@totalOutflow</h5>
   
        </div>
    </div>

    <!-- More Cards -->
    <div class="row">
        <div class="card">
                Debts
                <h5 class="card-title">$@totalDebt</h5>
            
        </div>
        <div class="card">
            
                Remaining Debts
                <h5 class="card-title">$@pending_Debt</h5>
           
        </div>
        <div class="card">
                Cleared Debt
                <h5 class="card-title">$@clearedDebts</h5>
            
        </div>
    </div>

    <!-- Tables Section -->
    <div class="table-container">
        <!-- Transactions Table -->
        <div class="table-wrapper">
            <h3>Transactions</h3>
            <label for="typeFilter">Filter By Type:</label>
            <select id="typeFilter" @onchange="FilterType" class="dropdown">
                <option value="All">All</option>
                <option value="Income">Income</option>
                <option value="Expense">Expense</option>
            </select>
            <table class="table-style">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Amount</th>
                        <th>Tag</th>
                        <th>Type</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in filteredTrans)
                    {
                        <tr>
                            <td>@transaction.trans_date</td>
                            <td>$@transaction.trans_amount</td>
                            <td>@transaction.trans_tag</td>
                            <td>@transaction.trans_type</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

            <!-- Transactions Table -->
            <div class="table-wrapper">
            <h3>Pending Debts</h3>
            <label for="typeFilter">Filter:</label>
            <select @onchange="updateFilter" class="dropdown">
                <option value="All">All</option>
                <option value="Highest">Highest</option>
                <option value="Lowest">Lowest</option>
            </select>
            <table class="table-style">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Amount</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var debt in pendingDebtsList)
                    {
                        <tr>
                            <td>@debt.source</td>
                            <td>$@debt.debt_amount</td>
                            <td>@debt.debt_status</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    // Declare variables for current user and financial data
    private User? currentUser;
    private int totalTrans = 0;
    private int totalAmount = 0;
    private int totalInflow = 0;
    private int totalOutflow = 0;
    private int totalDebt = 0;
    private int pending_Debt = 0;
    private int clearedDebts = 0;
    private string Message = "";
    private DateTime? start_date;
    private DateTime? end_date;
    private List<Transaction> filteredTrans = new();
    private List<Debt> pendingDebtsList = new();
    private List<Debt> clearedDebtsList = new();
    private string currentFilter = "All";

    // On component initialization, fetch user data

    protected override void OnInitialized()
    {
        UserData();
    }

    // Method to fetch current user's data
    private void UserData()
    {
        currentUser = UserService.GetLoggedInUser();

        if (currentUser != null)
        {
            filteredTrans = currentUser.Trans.ToList();
            pendingDebtsList = currentUser.Debts.Where(d => d.debt_status == "Pending").ToList();
            clearedDebtsList = currentUser.Debts.Where(d => d.debt_status == "Cleared").ToList();
            UpdateValues();
        }
    }

    // Method to update financial data (e.g., totals)
    private void UpdateValues()
    {
        totalTrans = filteredTrans.Count;

        totalInflow = filteredTrans
            .Where(t => t.trans_type == "Income")
            .Sum(t => int.TryParse(t.trans_amount, out var amount) ? amount : 0);

        totalOutflow = filteredTrans
            .Where(t => t.trans_type == "Expense")
            .Sum(t => int.TryParse(t.trans_amount, out var amount) ? amount : 0);

        totalDebt = pendingDebtsList
            .Sum(d => int.TryParse(d.debt_amount, out var amount) ? amount : 0);

        pending_Debt = pendingDebtsList
            .Sum(d => int.TryParse(d.debt_amount, out var amount) ? amount : 0);

        clearedDebts = clearedDebtsList
            .Sum(d => int.TryParse(d.cleared_amount, out var amount) ? amount : 0);

        totalAmount = totalInflow - totalOutflow + totalDebt;
        StateHasChanged();

    }
    // Method to filter transactions by amount (highest, lowest, or default)

    private void updateFilter(ChangeEventArgs e)
    {
        currentFilter = e.Value?.ToString() ?? "All";

        if (currentFilter == "Highest")
        {
            filteredTrans = currentUser?.Trans
                .OrderByDescending(t => int.TryParse(t.trans_amount, out var amount) ? amount : 0)
                .Take(5)
                .ToList() ?? new List<Transaction>();
        }
        else if (currentFilter == "Lowest")
        {
            filteredTrans = currentUser?.Trans
                .OrderBy(t => int.TryParse(t.trans_amount, out var amount) ? amount : 0)
                .Take(5)
                .ToList() ?? new List<Transaction>();
        }
        else
        {
            filteredTrans = currentUser?.Trans
                .Take(5)
                .ToList() ?? new List<Transaction>();
        }
    }

    // Method to add a new debt transaction
    private void AddDebt(int debtId, string receivedDate, string dueDate, int amount, string tag, string note, string source)
    {
        bool success = UserService.AddDebtTransaction(debtId, receivedDate, dueDate, amount.ToString(), tag, note, source);

        if (success)
        {
            // Refresh data
            UserData();
            Message = "Debt added successfully!";
        }
        else
        {
            Message = "Failed to add debt.";
        }
    }

    // Method to clear a specific debt using income transactions
    private void ClearDebt(Debt debt)
    {
        if (!int.TryParse(debt.debt_amount, out var debtAmount))
        {
            Message = "Invalid debt amount.";
            return;
        }

        int remainingDebt = debtAmount;
        int clearedAmount = 0;

        var incomeTransactions = filteredTrans
            .Where(t => t.trans_type == "Income" && int.TryParse(t.trans_amount, out _))
            .OrderBy(t => DateTime.Parse(t.trans_date))
            .ToList();

        foreach (var transaction in incomeTransactions)
        {
            if (!int.TryParse(transaction.trans_amount, out var transactionAmount)) continue;

            if (remainingDebt <= transactionAmount)
            {
                clearedAmount += remainingDebt;
                transactionAmount -= remainingDebt;
                transaction.trans_amount = transactionAmount.ToString();
                remainingDebt = 0;
                break;
            }
            else
            {
                clearedAmount += transactionAmount;
                remainingDebt -= transactionAmount;
                transaction.trans_amount = "0";
            }
        }

        if (remainingDebt > 0)
        {
            Message = "Insufficient funds to clear the debt.";
            return;
        }

        debt.cleared_amount = clearedAmount.ToString();
        debt.debt_status = "Cleared";

        bool debtUpdate = UserService.DebtDetails(debt);
        bool transactionsUpdate = UserService.UpdatedTransactions(filteredTrans);

        if (debtUpdate && transactionsUpdate)
        {
            // Refresh data
            UserData();
            Message = $"Debt of ${debtAmount} cleared successfully.";
        }
        else
        {
            Message = "Failed to clear debt. Please try again.";
        }
    }

    // Method to filter transactions by type (income, expense, or all)
    private void FilterType(ChangeEventArgs e)
    {
        var selectedType = e.Value?.ToString();

        if (!string.IsNullOrEmpty(selectedType) && selectedType != "All")
        {
            filteredTrans = currentUser?.Trans
                .Where(t => t.trans_type == selectedType)
                .ToList() ?? new List<Transaction>();
        }
        else
        {
            filteredTrans = currentUser?.Trans.ToList() ?? new List<Transaction>();
        }

        // Recalculate totals if needed
        UpdateValues();
    }

    // Method to filter transactions and debts by date range
    private void DateFilter()
    {
        if (start_date.HasValue && end_date.HasValue)
        {
            filteredTrans = currentUser?.Trans
                .Where(t => DateTime.TryParse(t.trans_date, out var date) && date >= start_date && date <= end_date)
                .ToList() ?? new List<Transaction>();

            pendingDebtsList = currentUser?.Debts
                .Where(d => d.debt_status == "Pending" && DateTime.TryParse(d.due_date, out var date) && date >= start_date && date <= end_date)
                .ToList() ?? new List<Debt>();

            clearedDebtsList = currentUser?.Debts
                .Where(d => d.debt_status == "Cleared" && DateTime.TryParse(d.Date, out var date) && date >= start_date && date <= end_date)
                .ToList() ?? new List<Debt>();

            UpdateValues();
        }
        else
        {
            Message = "Please select valid start and end dates.";
        }
    }
}
