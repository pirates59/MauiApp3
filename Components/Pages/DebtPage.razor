@page "/debt"
@using MauiApp3.Models
@using MauiApp3.Services
@inject NavigationManager NavigationManager
@inject UserService UserService

<style>
    .container {
        max-width: 1200px;
        margin: auto;
        display: flex;
        flex-direction: row;
        gap: 20px;
        padding: 20px;
    }

    .left-box {
        flex: 1;
        display: flex;
        flex-direction: column;
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 20px;
    }

    .right-box {
        flex: 2;
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 20px;
    }

    label {
        margin-bottom: 5px;
        font-weight: bold;
    }

    input {
        margin-bottom: 15px;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        width: calc(100% - 20px);
    }

    button {
        padding: 10px;
        background-color: #32ADE6;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        width: 140px;
        align-self: flex-start; /* Align button to the left */
    }

        button:hover {
            background-color: #28A0D6;
        }

    table {
        width: 100%;
        border-collapse: collapse;
    }

        table th,
        table td {
            border: 1px solid #ccc;
            padding: 8px;
            text-align: left;
        }

        table th {
            background-color: #32ADE6;
            color: white;
        }
</style>

<div class="container">
    <!-- Left Box for Form -->
    <div class="left-box">
        <h3>Debt Transactions</h3>

        <label for="receivedDate">Received Date:</label>
        <input @bind="receivedDate" type="date">

        <label for="dueDate">Due Date:</label>
        <input @bind="dueDate" type="date">

        <label for="amount">Debt Amount:</label>
        <input @bind="amount" type="number" placeholder="Enter amount">

        <label for="sourceName">Source Name:</label>
        <input @bind="sourceName" type="text" placeholder="Enter Source Name">

        <label for="debtTag">Debt Tag:</label>
        <input @bind="debtTag" type="text" placeholder="Provide tag">

        <label for="debtNote">Debt Note:</label>
        <input @bind="debtNote" type="text" placeholder="Write a note">

        <button @onclick="addDebt">Add Debt</button>

        @if (!string.IsNullOrEmpty(Message))
        {
            <div class="message">@Message</div>
        }
    </div>

    <!-- Right Box for Table -->
    <div class="right-box">
        <table>
            <thead>
                <tr>
                    <th>Received Date</th>
                    <th>Due Date</th>
                    <th>Amount</th>
                    <th>Source Name</th>
                    <th>Tag</th>
                    <th>Note</th>
                    <th>Status</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var debt in debts)
                {
                    <tr>
                        <td>@debt.given_Date</td>
                        <td>@debt.due_Date</td>
                        <td>@debt.debt_amount</td>
                        <td>@debt.source_name</td>
                        <td>@debt.debt_tag</td>
                        <td>@debt.debt_note</td>
                        <td>@debt.debt_Status</td>
                        <td>
                            <button class="clear" @onclick="() => ClearDebt(debt)">Clear</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>



 

@code {
    private DateTime? receivedDate;
    private DateTime? dueDate;
    private string sourceName = string.Empty;
    private string debtTag = string.Empty;
    private string debtNote = string.Empty;
    private int amount = 0;
    private string Message = string.Empty;


    private String newReceivedDate = "";
    private String newDueDate = "";
    private String newAmount = "";

    private List<Debt> debts = new();
    private List<Debt> filteredDebts = new();

    private List<Transaction> transactions = new();
    private int totalIncome = 0;
    private int totalExpenses = 0;
    private int totalDebts = 0;
    private int nettotal = 0;



    private int totalAmount = 0;




    protected override void OnInitialized()
    {
        LoadDebts();
        CalculateTotals();

    }

    private void LoadDebts()
    {
        var users = UserService.LoadUserAccounts();
        var loggedInUser = UserService.GetLoggedInUser();

        if (loggedInUser != null)
        {
            var currentUser = users.FirstOrDefault(u => u.userID == loggedInUser.userID);
            if (currentUser != null)
            {
                debts = currentUser.debts.ToList();
                transactions = currentUser.Trans.ToList();
            }
        }
    }

    private void CalculateTotals()
    {
        // Safely calculate total income
        totalIncome = transactions
            .Where(t => t.transaction_type == "Income")
            .Sum(t => int.TryParse(t.transaction_amount, out var amount) ? amount : 0);

        totalExpenses = transactions
            .Where(t => t.transaction_type == "Expense")
            .Sum(t => int.TryParse(t.transaction_amount, out var amount) ? amount : 0);

        totalDebts = debts
            .Where(d => d.debt_Status == "Pending")
            .Sum(d => int.TryParse(d.debt_amount, out var amount) ? amount : 0);

        nettotal = totalIncome + totalDebts - totalExpenses;
    }



    private void addDebt()
    {
        if (receivedDate == null || dueDate == null || string.IsNullOrEmpty(sourceName) ||
            string.IsNullOrEmpty(debtTag) || string.IsNullOrEmpty(debtNote) || amount <= 0)
        {
            Message = "Please fill all the fields correctly.";
            return;
        }

        newReceivedDate = receivedDate.Value.ToString("yyyy-MM-dd");
        newDueDate = receivedDate.Value.ToString("yyyy-MM-dd");
        newAmount = amount.ToString();

        int debt_id = debts.Any() ? debts.Max(d => d.debt_id) + 1 : 1;

        bool result = UserService.AddDebtTransaction(debt_id, newReceivedDate, newDueDate, newAmount, debtTag, debtNote, sourceName);

        if (result)
        {
            Message = "Debt added successfully!";
        }
        else
        {
            Message = "Failed to add debt.";
        }
    }

 
    private void ClearDebt(Debt debt)
    {
        if (!int.TryParse(debt.debt_amount, out var debtAmount))
        {
            Message = "Invalid debt amount. Unable to process.";
            return;
        }

        int remainingDebt = debtAmount;
        int clearedAmount = 0;

        var incomeTransactions = transactions
            .Where(t => t.transaction_type == "Income" && int.TryParse(t.transaction_amount, out var amt) && amt > 0)
            .OrderBy(t => t.transaction_Date)
            .ToList();

        foreach (var transaction in incomeTransactions)
        {
            if (!int.TryParse(transaction.transaction_amount, out var transactionAmount)) continue;

            if (remainingDebt <= transactionAmount)
            {

                clearedAmount += remainingDebt;
                transactionAmount -= remainingDebt;
                transaction.transaction_amount = transactionAmount.ToString();
                remainingDebt = 0;
                if (transactionAmount == 0)
                {
                    transactions.Remove(transaction);
                }
                break;
            }
            else
            {
                clearedAmount += transactionAmount;
                remainingDebt -= transactionAmount;
                transaction.transaction_amount = "0";
                transactions.Remove(transaction);
            }
        }

        if (remainingDebt > 0)
        {
            Message = "Insufficient funds across income transactions to clear the debt.";
            return;
        }

        var newDebtAmount = 0;
        debt.debt_Status = "Cleared";
        debt.cleared_amount = clearedAmount.ToString();
        debt.debt_amount = newDebtAmount.ToString();

        bool debtUpdateResult = UserService.UpdateDebtDetails(debt);
        bool transactionsUpdateResult = UserService.SaveUpdatedTransactions(transactions);

        if (debtUpdateResult && transactionsUpdateResult)
        {
            Message = $"Debt of {debtAmount} cleared successfully!";
        }
        else
        {
            Message = "Failed to save updates. Please try again.";
            debt.debt_Status = "Pending"; // Rollback in case of failure
            debt.cleared_amount = "0";
        }

        CalculateTotals();
    }


}
