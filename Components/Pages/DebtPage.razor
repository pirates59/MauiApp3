@page "/debt"
@using MauiApp3.Models
@using MauiApp3.Services
@inject NavigationManager NavigationManager
@inject UserService UserService

<style>
    /* Styling for the container and boxes */
    .container {
        max-width: 1200px;
        margin: auto;
        display: flex;
        flex-direction: row;
        gap: 20px;
        padding: 20px;
    }

    .left-box {
        flex: 1;
        display: flex;
        background-color: rgba(50, 173, 230, 0.25);
        flex-direction: column;
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 20px;
        position: relative;
    }

    .dropdown {
        padding: 5px;
        border-radius: 4px;
        border: 1px solid #ccc;
        font-size: 1rem;
    }

    .right-box {
        flex: 2;
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 20px;
        background-color: rgba(50, 173, 230, 0.25);
    }

    label {
        margin-bottom: 5px;
        font-weight: bold;
    }

    input {
        margin-bottom: 15px;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        width: calc(100% - 20px);
    }

    button {
        padding: 10px;
        background-color: #EC993D;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        width: 140px;
        align-self: flex-start;
    }

    clear {
        padding: 10px;
        background-color: #EC993D;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        width: 90px;
        align-self: flex-start;
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

        table th,
        table td {
            border: 1px solid #ccc;
            padding: 8px;
            text-align: left;
        }

        table th {
            color: black;
        }
</style>

<div class="container">
    <div class="left-box">
        <h3>Debt</h3>

        <!-- Input fields for debt information -->
        <label for="Date">Received Date</label>
        <input @bind="Date" type="date">

        <label for="due_date">Due Date</label>
        <input @bind="due_date" type="date">

        <label for="amount">Debt Amount</label>
        <input @bind="amount" type="number" placeholder="Enter amount">

        <label for="source">Source</label>
        <input @bind="source" type="text" placeholder="Enter the source">

        <label for="tag">Debt Tag</label>
        <input @bind="tag" type="text" placeholder="Enter a tag">

        <label for="debt_note">Debt Note</label>
        <input @bind="debt_note" type="text" placeholder="Enter a note">

        <!-- Button to add debt -->
        <button @onclick="Add_debt">Add Debt</button>

        <!-- Display message if applicable -->
        @if (!string.IsNullOrEmpty(Message))
        {
            <div class="message">@Message</div>
        }
    </div>

    <div class="right-box">
        <!-- Filter dropdown for debt list -->
          <label for="typeFilter">Filter:</label>
            
        <select @onchange="UpdateFilter" class="dropdown">
            <option value="All">All</option>
            <option value="Highest">Highest</option>
            <option value="Lowest">Lowest</option>
        </select>

        <!-- Table to display the debt information -->
        <table>
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Due Date</th>
                    <th>Amount</th>
                    <th>Pay off</th>
                    <th>Source</th>
                    <th>Tag</th>
                    <th>Note</th>
                    <th>Status</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <!-- Loop through the filtered debts and display each one -->
                @foreach (var debt in filteredDebts)
                {
                    <tr>
                        <td>@debt.Date</td>
                        <td>@debt.due_date</td>
                        <td>@debt.debt_amount</td>
                        <td>@debt.cleared_amount</td>
                        <td>@debt.source</td>
                        <td>@debt.debt_tag</td>
                        <td>@debt.debt_note</td>
                        <td>@debt.debt_status</td>
                        <td>
                            <!-- Show 'Clear' button only if the debt status is 'Pending' -->
                            @if (debt.debt_status == "Pending")
                            {
                                <button class="clear" @onclick="() => ClearedDebt(debt)">Clear</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    // Declare necessary properties and lists for debt and transaction data
    private DateTime? Date;
    private DateTime? due_date;
    private string source = string.Empty;
    private string tag = string.Empty;
    private string debt_note = string.Empty;
    private int amount = 0;
    private string currentFilter = "All";
    private string Message = string.Empty;

    private List<Debt> Debts = new();
    private List<Debt> filteredDebts = new();

    private List<Transaction> transactions = new();
    private int Income = 0;
    private int Expenses = 0;
    private int total_debts = 0;
    private int nettotal = 0;

    // Method to initialize and reload data on page load
    protected override void OnInitialized()
    {
        ReloadDebts();
        ApplyFilter();
        GrandTotal();
    }

    // Method to load debts and transactions for the logged-in user
    private void ReloadDebts()
    {
        var users = UserService.UserAccounts();
        var loggedInUser = UserService.GetLoggedInUser();

        if (loggedInUser != null)
        {
            var currentUser = users.FirstOrDefault(u => u.userId == loggedInUser.userId);
            if (currentUser != null)
            {
                Debts = currentUser.Debts.ToList();
                transactions = currentUser.Trans.ToList();
            }
        }
    }

    // Method to calculate grand total of income, expenses, and pending debts
    private void GrandTotal()
    {
        Income = transactions
            .Where(t => t.trans_type == "Income")
            .Sum(t => int.TryParse(t.trans_amount, out var amount) ? amount : 0);

        Expenses = transactions
            .Where(t => t.trans_type == "Expense")
            .Sum(t => int.TryParse(t.trans_amount, out var amount) ? amount : 0);

        total_debts = Debts
            .Where(d => d.debt_status == "Pending")
            .Sum(d => int.TryParse(d.debt_amount, out var amount) ? amount : 0);

        nettotal = Income + total_debts - Expenses;
    }

    // Method to add a new debt entry
    private void Add_debt()
    {
        if (Date == null || due_date == null || string.IsNullOrEmpty(source) ||
            string.IsNullOrEmpty(tag) || string.IsNullOrEmpty(debt_note) || amount <= 0)
        {
            Message = "Please fill all the fields correctly.";
            return;
        }

        int debt_id = Debts.Any() ? Debts.Max(d => d.debt_id) + 1 : 1;

        bool proof = UserService.AddDebtTransaction(debt_id, Date.Value.ToString("yyyy-MM-dd"),
           due_date.Value.ToString("yyyy-MM-dd"), amount.ToString(), tag, debt_note, source);

        if (proof)
        {
            Debts.Add(new Debt
                {
                    debt_id = debt_id,
                    Date = Date.Value.ToString("yyyy-MM-dd"),
                    due_date = due_date.Value.ToString("yyyy-MM-dd"),
                    debt_amount = amount.ToString(),
                    source = source,
                    debt_tag = tag,
                    debt_note = debt_note,
                    debt_status = "Pending"
                });

            ApplyFilter();
            GrandTotal();
            Message = "Debt added successfully!";
            StateHasChanged();
        }
        else
        {
            Message = "Failed to add debt.";
        }
    }

    // Method to update filter selection and apply the filter
    private void UpdateFilter(ChangeEventArgs e)
    {
        currentFilter = e.Value?.ToString() ?? "All";
        ApplyFilter();
    }

    // Method to apply the selected filter on the debts list
    private void ApplyFilter()
    {
        if (currentFilter == "Highest")
        {
            filteredDebts = Debts
                .OrderByDescending(d => int.TryParse(d.debt_amount, out var amount) ? amount : 0)
                .ToList();
        }
        else if (currentFilter == "Lowest")
        {
            filteredDebts = Debts
                .OrderBy(d => int.TryParse(d.debt_amount, out var amount) ? amount : 0)
                .ToList();
        }
        else
        {
            filteredDebts = Debts;
        }
    }

    // Method to clear the debt when a payment is made
    private void ClearedDebt(Debt debt)
    {
        if (!int.TryParse(debt.debt_amount, out var originalAmount))
        {
            Message = "Invalid debt amount. Unable to process.";
            return;
        }

        int remaining_debt = originalAmount;
        int payoff = 0;

        var incomeTrans = transactions
            .Where(t => t.trans_type == "Income" && int.TryParse(t.trans_amount, out var amt) && amt > 0)
            .OrderBy(t => t.trans_date)
            .ToList();

        foreach (var trans in incomeTrans)
        {
            if (!int.TryParse(trans.trans_amount, out var transAmount)) continue;

            if (remaining_debt <= transAmount)
            {
                payoff += remaining_debt;
                transAmount -= remaining_debt;
                trans.trans_amount = transAmount.ToString();
                remaining_debt = 0;
                if (transAmount == 0)
                {
                    transactions.Remove(trans);
                }
                break;
            }
            else
            {
                payoff += transAmount;
                remaining_debt -= transAmount;
                trans.trans_amount = "0";
                transactions.Remove(trans);
            }
        }

        if (remaining_debt > 0)
        {
            Message = "Insufficient funds across income transactions to clear the debt.";
            return;
        }

        debt.cleared_amount = payoff.ToString();
        debt.debt_status = "Cleared";

        bool debtResult = UserService.DebtDetails(debt);
        bool transactionsUpdate = UserService.UpdatedTransactions(transactions);

        if (debtResult && transactionsUpdate)
        {
            Message = $"Debt of {originalAmount} cleared successfully!";
            ReloadDebts();
            ApplyFilter();
        }
        else
        {
            Message = "Failed to clear debt. Please try again.";
            debt.debt_status = "Pending";
            debt.cleared_amount = "0";
        }

        GrandTotal();
    }
}
