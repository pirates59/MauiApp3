@page "/transaction"
@using MauiApp3.Models
@using MauiApp3.Services
@inject NavigationManager NavigationManager
@inject UserService UserService


<style>
    /* Styling for the container */
    .container {
        background-color: rgba(50, 173, 230, 0.25);
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 8px 10px rgba(0, 0, 0, 0.1);
        width: 100%;
        margin: auto;
        margin-top: 50px;
        height: 100%;
    }

    h3 {
        text-align: center;
        font-size: 1.5rem;
        margin-bottom: 20px;
        color: #333;
    }

    /* Styling for the form */
    .form {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
    }

        /* Input and select styling */
        .form input, .form select {
            display: block;
            width: 100%;
            margin-bottom: 20px;
            padding: 12px;
            border: 1px solid #ccc;
            border-radius: 8px;
            font-size: 1rem;
            background-color: #fff;
        }

            /* Focus styling for inputs and select */
            .form input:focus, .form select:focus {
                border-color: #007BFF;
                outline: none;
                box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
            }

        /* Button styling */
        .form button {
            margin-left: auto;
            width: auto;
            padding: 10px 20px;
            background-color: #EC993D;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            cursor: pointer;
            font-weight: bold;
        }

            /* Hover and active states for the button */
            .form button:hover {
                background-color: #d27c32;
            }

            .form button:active {
                background-color: #b8692a;
            }

    /* Styling for success or error messages */
    .messages {
        color: green;
        font-size: 0.9rem;
        margin-top: 10px;
    }
</style>

<div class="container">
    <h3>Transaction Page</h3>
    <div class="form">
        <!-- Input for transaction date -->
        <input @bind="Date" placeholder="Enter date" type="date">
        <!-- Input for transaction amount -->
        <input @bind="amount" placeholder="Provide Amount" type="text">
        <!-- Dropdown to select transaction type -->
        <select @bind="type">
            <option value="">Choose Type</option>
            <option value="Income">Income</option>
            <option value="Expense">Expense</option>
        </select>
        <!-- Input for transaction tag -->
        <input @bind="tag" placeholder="Provide a tag" type="text">
        <!-- Input for transaction note -->
        <input @bind="note" placeholder="Write a note" type="text">
        <!-- Button to add transaction -->
        <button @onclick="AddTransaction">Add Transaction</button>
        @if (!string.IsNullOrEmpty(Message))
        {
            <!-- Display success or error message -->
            <div class="message">@Message</div>
        }
    </div>
</div>

@code {
    private DateTime? Date; // Stores the transaction date
    private string amount = ""; // Stores the transaction amount
    private string type = ""; // Stores the transaction type (Income or Expense)
    private string tag = ""; // Stores the transaction tag
    private string note = ""; // Stores the transaction note
    private string Message = ""; // Stores feedback messages for the user
    private string SDate = ""; // Stores the formatted date as a string
    private int totalInflow = 0;
    private List<Transaction> filteredTransactions = new();
    private List<Transaction> Transaction = new(); // List to manage transactions
    private User? currentUser; // Stores the current logged-in user

    // Method called when the component is initialized
 

    protected override void OnInitialized()
    {
        currentUser = UserService.GetLoggedInUser();
        if (currentUser != null)
        {
            filteredTransactions = UserService.UserTransactions();
            totalInflow = currentUser.Trans
                .Where(t => t.trans_type == "Income")
                .Sum(t => int.TryParse(t.trans_amount, out var amount) ? amount : 0);
        }
        else
        {
            Message = "Please log in to add transactions.";
        }
    }

    // Method to handle adding a transaction
    private void AddTransaction()
    {
        if (string.IsNullOrWhiteSpace(amount) ||
            string.IsNullOrWhiteSpace(type) ||
            string.IsNullOrWhiteSpace(tag) ||
            string.IsNullOrWhiteSpace(note))
        {
            Message = "All fields are required. Please fill them correctly.";
            return;
        }

        if (!int.TryParse(amount, out var transactionAmount))
        {
            Message = "Please enter a valid amount.";
            return;
        }

        SDate = Date.HasValue ? Date.Value.ToString("yyyy-MM-dd") : "";

        if (type == "Expense" && transactionAmount > totalInflow)
        {
            Message = "Insufficient balance. Your total income is less than the expense.";
            Clear();
            return;
        }

        // Create a new transaction object
        var newTransaction = new Transaction
            {
                trans_date = SDate,
                trans_amount = amount,
                trans_type = type,
                trans_tag = tag,
                trans_note = note
            };

        try
        {
            // Attempt to add the transaction
            bool results = UserService.addTransaction(newTransaction);

            if (results)
            {
                Message = "Transaction added successfully!";
                Clear(); // Clear the form fields on success
            }
            else
            {
                Message = "Failed to add transaction. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            Message = "An error occurred while adding the transaction.";
        }
    }

    // Method to clear the form fields
    private void Clear()
    {
        amount = "";
        type = "";
        tag = "";
        note = "";
    }
}
