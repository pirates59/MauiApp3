@page "/transaction"
@using MauiApp3.Models
@using MauiApp3.Services
@inject NavigationManager NavigationManager
@inject UserService UserService

<style>
    .container {
        background-color: rgba(50, 173, 230, 0.25);
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 8px 10px rgba(0, 0, 0, 0.1);
        width: 100%;
        margin: auto;
        margin-top: 50px;
        height: 100%;
    }

    h3 {
        text-align: center;
        font-size: 1.5rem;
        margin-bottom: 20px;
        color: #333;
    }

    .form {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
    }

    .form input, .form select {
        display: block;
        width: 100%;
        margin-bottom: 20px;
        padding: 12px;
        border: 1px solid #ccc;
        border-radius: 8px;
        font-size: 1rem;
        background-color: #fff;
    }

        .form input:focus, .form select:focus {
            border-color: #007BFF;
            outline: none;
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
        }



        .form button {
            margin-left: auto; 
            width: auto; 
            padding: 10px 20px;
            background-color: #EC993D;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            cursor: pointer;
            font-weight: bold;
            .form button:hover {
            background-color: #EC993D;
        }

    .form button:hover {
        background-color: #d27c32;
    }

    .form button:active {
        background-color: #b8692a;
    }

    .messages {
        color: green;
        font-size: 0.9rem;
        margin-top: 10px;
    }
</style>
<div class="search-container">
    <label for="noteSearch">Search by Note:</label>
    <input type="text" id="noteSearch" @bind="noteSearch" />
    <button class="styled-button" @onclick="SearchByNote">Search</button>

    <label for="startDate">Start Date:</label>
    <input type="date" id="startDate" @bind="startDate" />

    <label for="endDate">End Date:</label>
    <input type="date" id="endDate" @bind="endDate" />

    <button class="styled-button" @onclick="FilterByDateRange">Filter by Date Range</button>
</div>

<div class="container">
    <h3>Transactions</h3>
    <div class="form">
        <input @bind="Date" placeholder="Select the date" type="date">
        <input @bind="amount" placeholder="Enter the amount" type="text">
        <select @bind="type">
            <option value="">Choose type</option>
            <option value="Income">Income</option>
            <option value="Expense">Expense</option>
        </select>
        <input @bind="tag" placeholder="Enter a tag" type="text">
        <input @bind="note" placeholder="Enter a note" type="text">
        <button @onclick="AddTransactions">Add Transaction</button>
        @if (!string.IsNullOrEmpty(Message))
        {
            <div class="messages">@Message</div>
        }
    </div>
</div>

 <div class="transactions-container">
    @if (transactionFilter != null && transactionFilter.Any())
        {
            <table class="transaction-table">
                <thead>
                    <tr>
                        <th>
                            Type
                            <select id="tagFilter" @onchange="FilterByType">
                                <option value="">All</option>
                                @foreach (var tag in current_user.Trans.Select(t => t.trans_type).Distinct())
                                {
                                    <option value="@tag">@tag</option>
                                }
                            </select>
                        </th>
                        <th>Amount</th>
                        <th>Date </th>
                        <th>
                            Tag
                            <select id="tagFilter" @onchange="FilterByTag">
                                <option value="">All</option>
                                @foreach (var tag in current_user.Trans.Select(t => t.trans_tag).Distinct())
                                {
                                    <option value="@tag">@tag</option>
                                }
                            </select>
                        </th>
                        <th>Note</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var transaction in transactionFilter)
                    {
                        <tr>
                            <td>@transaction.trans_type</td>
                            <td class="amount">@transaction.trans_amount</td>
                            <td>@transaction.trans_date</td>
                            <td>@transaction.trans_tag</td>
                            <td>@transaction.trans_note</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No transactions available.</p>
        }
    </div>

@code {
    
    private string amount = "";
    private string type = "";
    private string Message = "";
    private string tag = "";
    private string note = "";
    private DateTime? Date;
    private string SDate = "";

    private List<Transaction> transactionFilter = new();
    private User? current_user;
    private string filterType = "All";
    private int totalIncome = 0;
    private bool isSortAscending = true;
    private string noteSearch = string.Empty;
    private DateTime? startDate;
    private DateTime? endDate;

    protected override void OnInitialized()
    {
        current_user = UserService.GetLoggedInUser();
        if (current_user == null)
        {
            Message = "Please log in to add transactions.";
        }
    }
    private void AddTransactions()
    {
        if (string.IsNullOrWhiteSpace(amount) ||
            string.IsNullOrWhiteSpace(type) ||
            string.IsNullOrWhiteSpace(tag) ||
            string.IsNullOrWhiteSpace(note))
        {
            Message = "All fields are required. Please fill them correctly.";
            return;
        }

        if (!int.TryParse(amount, out var transactionAmount))
        {
            Message = "Please enter a valid amount.";
            return;
        }

        SDate = Date.HasValue ? Date.Value.ToString("yyyy-MM-dd") : "";

        if (type == "Expense" && transactionAmount > totalIncome)
        {
            Message = "Insufficient balance. Your total income is less than the expense.";
            ClearFields();
            return;
        }

        var newTransaction = new Transaction
            {
                trans_date = SDate,
                trans_amount = amount,
                trans_type = type,
                trans_tag = tag,
                trans_note = note
            };

        try
        {
            bool result = UserService.addTransaction(newTransaction);

            if (result)
            {
                current_user = UserService.GetLoggedInUser();
                transactionFilter = current_user.Trans;
                Message = "Transaction added successfully!";
                if (type == "Income")
                {
                    totalIncome += transactionAmount;
                }
                StateHasChanged();

                ClearFields();
            }
            else
            {
                Message = "Failed to add transaction. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            Message = "An error occurred while adding the transaction.";
        }
    }

    private void FilterByType(ChangeEventArgs e)
    {
        var selectedType = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedType))
        {
            transactionFilter = current_user.Trans
                .Where(t => t.trans_type == selectedType)
                .ToList();
        }
        else
        {
            transactionFilter = current_user.Trans;
        }
    }

    private void FilterByTag(ChangeEventArgs e)
    {
        var selectedTag = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedTag))
        {
            transactionFilter = current_user.Trans
                .Where(t => t.trans_tag == selectedTag)
                .ToList();
        }
        else
        {
            transactionFilter = current_user.Trans;
        }
    }

    private void ToggleSortByDate()
    {
        if (isSortAscending)
        {
            transactionFilter = transactionFilter
                .OrderBy(t => DateTime.Parse(t.trans_date))
                .ToList();
        }
        else
        {
            transactionFilter = transactionFilter
                .OrderByDescending(t => DateTime.Parse(t.trans_date))
                .ToList();
        }

        isSortAscending = !isSortAscending;
    }

    private void SearchByNote()
    {
        transactionFilter = current_user.Trans
            .Where(t => string.IsNullOrEmpty(noteSearch) ||
                        (t.trans_note?.IndexOf(noteSearch, StringComparison.OrdinalIgnoreCase) >= 0))
            .ToList();
    }

    private void FilterByDateRange()
    {
        if (startDate.HasValue && endDate.HasValue)
        {
            transactionFilter = current_user.Trans
               .Where(t => DateTime.TryParse(t.trans_date, out DateTime transactionDate)
                         && transactionDate >= startDate.Value
                         && transactionDate <= endDate.Value)
                .ToList();
        }
        else
        {
            Message = "Please select both start and end dates.";
        }
    }

    private void ClearFields()
    {
        Date = null;
        amount = "";
        type = "";
        tag = "";
        note = "";
    }
}

